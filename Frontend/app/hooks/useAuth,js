import { useEffect, useState } from "react";
import axios from "axios";
import { useRouter } from "next/router";

const useAuth = () => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null); // To manage login errors
  const router = useRouter();

  useEffect(() => {
    const checkCredentials = () => {
      setIsLoading(true); // Start loading

      const accessToken = localStorage.getItem("accessToken");
      const apiToken = localStorage.getItem("apiToken");

      if (accessToken && apiToken) {
        setIsAuthenticated(true);
      } else {
        setIsAuthenticated(false);
        router.push("/auth"); // Redirect to /auth if tokens are missing
      }

      setIsLoading(false); // Stop loading once check is complete
    };

    checkCredentials();
  }, [router]);

  const login = async (userData) => {
    try {
      setIsLoading(true); // Start loading
      setError(null); // Reset error state

      const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/createAccount`, userData);
      const { accessToken, apiToken } = response.data;

      localStorage.setItem("accessToken", accessToken);
      localStorage.setItem("apiToken", apiToken);

      setIsAuthenticated(true);
      router.push("/"); // Redirect to homepage on successful login
    } catch (error) {
      console.error("Login failed", error);
      setError("Login failed. Please try again."); // Set error message
    } finally {
      setIsLoading(false); // End loading
    }
  };

  const logout = () => {
    localStorage.removeItem("accessToken");
    localStorage.removeItem("apiToken");
    setIsAuthenticated(false);
    router.push("/auth"); // Redirect to /auth on logout
  };

  return { isAuthenticated, isLoading, login, logout, error };
};

export default useAuth;
